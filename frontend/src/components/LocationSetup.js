import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport locationService from '../services/locationService';\n\nconst LocationSetupModal = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.6);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(4px);\n`;\n\nconst Modal = styled.div`\n  background: white;\n  border-radius: 1rem;\n  padding: 2rem;\n  width: 90%;\n  max-width: 500px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  animation: slideIn 0.3s ease-out;\n  \n  @keyframes slideIn {\n    from {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\n\nconst Header = styled.div`\n  text-align: center;\n  margin-bottom: 2rem;\n  \n  .icon {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n  }\n  \n  h2 {\n    color: var(--text-dark);\n    margin-bottom: 0.5rem;\n    font-size: 1.5rem;\n  }\n  \n  p {\n    color: var(--text-light);\n    line-height: 1.5;\n  }\n`;\n\nconst LocationOptions = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 2rem;\n`;\n\nconst LocationButton = styled.button`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border: 2px solid var(--border-light);\n  border-radius: 0.75rem;\n  background: white;\n  color: var(--text-dark);\n  cursor: pointer;\n  transition: all 0.2s;\n  text-align: left;\n  \n  &:hover {\n    border-color: var(--primary-green);\n    background: var(--secondary-green);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n  \n  .icon {\n    font-size: 1.5rem;\n    min-width: 1.5rem;\n  }\n  \n  .content {\n    flex: 1;\n    \n    .title {\n      font-weight: 600;\n      margin-bottom: 0.25rem;\n    }\n    \n    .description {\n      font-size: 0.875rem;\n      color: var(--text-light);\n    }\n  }\n`;\n\nconst ZipCodeForm = styled.div`\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid var(--border-light);\n  \n  label {\n    display: block;\n    margin-bottom: 0.5rem;\n    color: var(--text-dark);\n    font-weight: 500;\n  }\n  \n  .input-group {\n    display: flex;\n    gap: 0.75rem;\n    margin-bottom: 1rem;\n  }\n  \n  input {\n    flex: 1;\n    padding: 0.75rem;\n    border: 1px solid var(--border-light);\n    border-radius: 0.5rem;\n    font-size: 1rem;\n    \n    &:focus {\n      outline: none;\n      border-color: var(--primary-green);\n      box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);\n    }\n  }\n  \n  .radius-input {\n    width: 120px;\n    flex: none;\n  }\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: 1rem;\n  justify-content: flex-end;\n  \n  button {\n    padding: 0.75rem 1.5rem;\n    border-radius: 0.5rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n    \n    &.secondary {\n      background: var(--border-light);\n      color: var(--text-dark);\n      border: 1px solid var(--border-light);\n      \n      &:hover {\n        background: #E5E7EB;\n      }\n    }\n    \n    &.primary {\n      background: var(--primary-green);\n      color: white;\n      border: 1px solid var(--primary-green);\n      \n      &:hover:not(:disabled) {\n        background: var(--primary-green-dark);\n      }\n      \n      &:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n      }\n    }\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  background: #FEF2F2;\n  border: 1px solid #FECACA;\n  border-radius: 0.5rem;\n  padding: 0.75rem;\n  margin-bottom: 1rem;\n  color: #DC2626;\n  font-size: 0.875rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`;\n\nconst LoadingSpinner = styled.div`\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border: 2px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 2px solid var(--primary-green);\n  animation: spin 1s linear infinite;\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst LocationSetup = ({ isOpen, onClose, onLocationSet }) => {\n  const [showZipForm, setShowZipForm] = useState(false);\n  const [zipCode, setZipCode] = useState('');\n  const [radius, setRadius] = useState(25);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [locationStatus, setLocationStatus] = useState(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Check if user has already set a location\n      const existingZip = locationService.getUserZipCode();\n      const existingLocation = locationService.getUserLocation();\n      const permission = locationService.getLocationPermission();\n      \n      setLocationStatus({\n        hasZipCode: !!existingZip,\n        hasLocation: !!existingLocation,\n        permission\n      });\n      \n      if (existingZip) {\n        setZipCode(existingZip);\n      }\n    }\n  }, [isOpen]);\n\n  const handleUseCurrentLocation = async () => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      const { location, zipCode: foundZip } = await locationService.requestLocationWithPrompt();\n      \n      if (foundZip) {\n        await onLocationSet({\n          type: 'gps',\n          zipCode: foundZip,\n          latitude: location.latitude,\n          longitude: location.longitude,\n          radius: radius\n        });\n        onClose();\n      } else {\n        setError('Could not determine your zip code from GPS location. Please enter it manually.');\n        setShowZipForm(true);\n      }\n    } catch (error) {\n      console.error('Location error:', error);\n      if (error.code === 1) {\n        setError('Location access denied. Please enter your zip code manually.');\n      } else if (error.code === 2) {\n        setError('Location unavailable. Please enter your zip code manually.');\n      } else {\n        setError('Location request timed out. Please enter your zip code manually.');\n      }\n      setShowZipForm(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleZipCodeSubmit = async () => {\n    if (!zipCode.trim()) {\n      setError('Please enter a zip code');\n      return;\n    }\n    \n    if (!/^\\d{5}(-\\d{4})?$/.test(zipCode.trim())) {\n      setError('Please enter a valid 5-digit zip code');\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n    \n    try {\n      const locationData = await locationService.setUserZipCode(zipCode.trim());\n      \n      await onLocationSet({\n        type: 'zipcode',\n        zipCode: zipCode.trim(),\n        latitude: locationData?.latitude,\n        longitude: locationData?.longitude,\n        city: locationData?.city,\n        state: locationData?.state,\n        radius: radius\n      });\n      \n      onClose();\n    } catch (error) {\n      console.error('Zip code error:', error);\n      setError('Invalid zip code or service unavailable. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSkip = () => {\n    // Continue without location\n    onLocationSet(null);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <LocationSetupModal>\n      <Modal>\n        <Header>\n          <div className=\"icon\">üìç</div>\n          <h2>Find Local Products Near You</h2>\n          <p>\n            Set your location to discover fresh products from nearby merchants and farmers.\n            We'll show you items within your preferred delivery radius.\n          </p>\n        </Header>\n\n        {error && (\n          <ErrorMessage>\n            <span>‚ö†Ô∏è</span>\n            {error}\n          </ErrorMessage>\n        )}\n\n        {!showZipForm ? (\n          <LocationOptions>\n            <LocationButton \n              onClick={handleUseCurrentLocation} \n              disabled={loading}\n            >\n              <div className=\"icon\">üéØ</div>\n              <div className=\"content\">\n                <div className=\"title\">\n                  Use Current Location\n                  {loading && <LoadingSpinner style={{marginLeft: '0.5rem'}} />}\n                </div>\n                <div className=\"description\">\n                  Automatically detect your location for the most accurate results\n                </div>\n              </div>\n            </LocationButton>\n\n            <LocationButton onClick={() => setShowZipForm(true)}>\n              <div className=\"icon\">üìÆ</div>\n              <div className=\"content\">\n                <div className=\"title\">Enter Zip Code</div>\n                <div className=\"description\">\n                  Manually enter your zip code and set your shopping radius\n                </div>\n              </div>\n            </LocationButton>\n          </LocationOptions>\n        ) : (\n          <ZipCodeForm>\n            <label>Zip Code & Shopping Radius</label>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter zip code (e.g., 90210)\"\n                value={zipCode}\n                onChange={(e) => setZipCode(e.target.value)}\n                maxLength=\"5\"\n                pattern=\"\\d{5}\"\n              />\n              <input\n                type=\"number\"\n                className=\"radius-input\"\n                placeholder=\"Miles\"\n                value={radius}\n                onChange={(e) => setRadius(Math.max(1, Math.min(50, parseInt(e.target.value) || 25)))}\n                min=\"1\"\n                max=\"50\"\n              />\n            </div>\n            <div style={{ fontSize: '0.875rem', color: 'var(--text-light)', marginBottom: '1rem' }}>\n              We'll show products from merchants within {radius} miles of {zipCode || 'your zip code'}\n            </div>\n          </ZipCodeForm>\n        )}\n\n        <ActionButtons>\n          <button \n            className=\"secondary\" \n            onClick={showZipForm ? () => setShowZipForm(false) : handleSkip}\n            disabled={loading}\n          >\n            {showZipForm ? 'Back' : 'Skip for Now'}\n          </button>\n          \n          {showZipForm && (\n            <button \n              className=\"primary\" \n              onClick={handleZipCodeSubmit}\n              disabled={loading || !zipCode.trim()}\n            >\n              {loading ? (\n                <>Finding Products... <LoadingSpinner /></>\n              ) : (\n                'Find Local Products'\n              )}\n            </button>\n          )}\n        </ActionButtons>\n\n        {locationStatus?.hasZipCode && (\n          <div style={{ marginTop: '1rem', padding: '0.75rem', background: 'var(--secondary-green)', borderRadius: '0.5rem', fontSize: '0.875rem', color: 'var(--text-dark)' }}>\n            üí° Currently showing products near {locationService.getUserZipCode()}\n          </div>\n        )}\n      </Modal>\n    </LocationSetupModal>\n  );\n};\n\nexport default LocationSetup;\n